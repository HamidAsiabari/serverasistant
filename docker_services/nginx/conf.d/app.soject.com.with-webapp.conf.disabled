# DISABLED - Nginx configuration for app.soject.com with web-app proxy
# This file is temporarily disabled to prevent nginx startup errors
# To enable: rename this file to app.soject.com.with-webapp.conf

# Nginx configuration for app.soject.com with web-app proxy
# This configuration tries to proxy to web-app, with fallback

upstream web_app_backend {
    server web-app:8080;
}

server {
    listen 80;
    server_name app.soject.com localhost;

    # Logging
    access_log /var/log/nginx/app.soject.com.access.log;
    error_log /var/log/nginx/app.soject.com.error.log;

    # Root location - try to proxy to web-app, fallback to simple response
    location / {
        # Try to proxy to web-app
        proxy_pass http://web_app_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # Error handling - if web-app is not available, serve fallback
        proxy_intercept_errors on;
        error_page 502 503 504 = @fallback;
    }

    # Fallback location when web-app is not available
    location @fallback {
        return 200 "Nginx is working! Web-app service is not available.\nServer: $server_name\n";
        add_header Content-Type text/plain;
    }

    # Health check endpoint
    location /health {
        # Try web-app health first
        proxy_pass http://web_app_backend/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Fallback if web-app is not available
        proxy_intercept_errors on;
        error_page 502 503 504 = @health_fallback;
    }

    # Health fallback
    location @health_fallback {
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }

    # Test endpoint
    location /test {
        return 200 "Test endpoint working!\n";
        add_header Content-Type text/plain;
    }

    # Status endpoint
    location /status {
        return 200 "Nginx Status: OK\nWeb-app Status: Check /health endpoint\n";
        add_header Content-Type text/plain;
    }
} 